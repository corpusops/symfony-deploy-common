---
cops_symfony_name: symfonyinstance
cops_symfony_project_module_name: "{{cops_symfony_name}}"
cops_symfony_branch_envs: {}
cops_symfony_default_deploy_env: prod
cops_symfony_deploy_env: "{{ (
  cops_symfony_gitref in [cops_symfony_default_gitref, cops_symfony_default_docker_tag]
    and cops_symfony_default_deploy_env
    or  cops_symfony_branch_envs.get(cops_symfony_gitref, cops_symfony_default_deploy_env))}}"
cops_symfony_docker_tag: "{{cops_symfony_gitref.replace('master', cops_symfony_default_docker_tag)}}"
cops_symfony_project_env: "DEV"
cops_symfony_docker_image: "{{cops_symfony_name}}"
cops_symfony_default_docker_tag: "latest"
cops_symfony_tld_domain: example.com
cops_symfony_mail_domain: "{{ cops_symfony_tld_domain }}"
cops_symfony_default_gitref: "master"
cops_symfony_gitref: "{{cops_symfony_default_gitref}}"
cops_symfony_dir_default: "/srv/docker/{{cops_symfony_name}}"
cops_symfony_dir: "{{cops_symfony_dir_default}}"
cops_symfony_hostname: "{{cops_symfony_deploy_env}}-{{cops_symfony_name}}.{{cops_symfony_tld_domain}}"
cops_symfony_alternate_hostnames: [".{{cops_symfony_tld_domain}}"]
cops_symfony_secret_key: "SuperSecret"
cops_symfony_gateway: "{{ ansible_default_ipv4.address}}"
cops_symfony_devmode: "{{ansible_connection|default('ssh') in ['local']}}"
cops_symfony_composename: "{{forced_cops_symfony_composename|default(cops_symfony_devmode and
  (teleport_wd|copsf_basename) or
  cops_symfony_name)}}"
cops_symfony_backuped_dbs_keep_lasts: "1"
cops_symfony_backuped_dbs: all
cops_symfony_db_host: "db"
cops_symfony_db_port: "5432"
cops_symfony_db_user: "secretJFCxdffffwPH9R9jIi"
cops_symfony_db_password: "secrdet44ff4gzQNe3c885ttgJ"
cops_symfony_db_name: "{{cops_symfony_name}}"
cops_symfony_build_args: "--no-cache symfony cron"
cops_symfony_nginx_avoid_ssl_rewrite: ""
# backup could be remove in a-while when we have redeployed it everywhere
cops_symfony_started_services_default: "db backup"
cops_symfony_started_services: "{{cops_symfony_started_services_default}}"
cops_symfony_restarted_services_default: "symfony cron"
cops_symfony_restarted_services: "{{cops_symfony_restarted_services_default}}"
cops_symfony_purge_volumes: []
cops_symfony_sshargs: >-
  {% set k = hostvars[inventory_hostname].get(
                'ansible_ssh_private_key_file', '') %}
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  {% if (
      hostvars[inventory_hostname].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[inventory_hostname].ssh_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_common_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% if((cops_symfony_force_sync_ssh_user) or
        (cops_symfony_sync_ssh_user and (cops_symfony_force_sync_ssh_user == True))
    )%}
  {% set user = cops_symfony_sync_ssh_user or ansible_user or '' %}
  {% if user %}-l {{user}}{% endif %}
  {% endif %}
cops_symfony_build: false
cops_symfony_pull: true
cops_symfony_registries: []
#- {registry: registry.foo.net, username: foo, password: bar}
cops_symfony_compose_files_prod: [docker-compose.yml, docker-compose-prod.yml]
cops_symfony_compose_files_dev: [docker-compose.yml, docker-compose-dev.yml]
cops_symfony_compose_files: "{{(cops_symfony_devmode and cops_symfony_compose_files_dev or cops_symfony_compose_files_prod)}}"
cops_symfony_dc:
  docker-compose {% for i in cops_symfony_compose_files %} -f {{i}}{% endfor %}
  -p "{{cops_symfony_composename}}"
cops_symfony_force_reinstall: ''
cops_symfony_default_from_email: noreply@{{cops_symfony_hostname}}
cops_symfony_server_email: "{{cops_symfony_default_from_email}}"
cops_symfony_mailcatcher_user: mailcatcher
cops_symfony_mailcatcher_password: mailcatcher
cops_symfony_email_server: mailcatcher
cops_symfony_email_host_user: ''
cops_symfony_email_host_password: ''
cops_symfony_email_host_port: 1025
cops_symfony_email_use_tls: 'no'
cops_symfony_hosts_whitelist: "{{(
    [cops_symfony_hostname, '0.0.0.0', '.{0}'.format(cops_symfony_hostname)]+
    cops_symfony_alternate_hostnames
  )|join('-|_')}}"
cops_symfony_sentry_tags: ["env:{{cops_symfony_deploy_env}}"]
cops_symfony_sentry_dsn: ''
cops_symfony_php_max_workers: "10"
cops_symfony_php_max_spare_workers: "5"
cops_symfony_php_min_spare_workers: "3"
cops_symfony_php_memory_limit: "128M"
cops_symfony_php_apcu_enabled: "1"
cops_symfony_migrate: false
cops_symfony_php_xdebug_enabled: "0"
cops_symfony_php_opcache_enabled: "1"
cops_symfony_docker_env_freeform: |-
  {{ cops_symfony_docker_env_defaults}}
  {{ cops_symfony_docker_env_extra}}
cops_symfony_docker_env_defaults: ""
# free form for params inside dockerenv
cops_symfony_maintenance_flags_dir: /code/app/private
cops_symfony_http_listen: "0.0.0.0"
cops_symfony_http_port: "80"
cops_symfony_https_port: "443"
cops_symfony_api_listen: "127.0.0.1"
cops_symfony_api_port: "9000"
cops_symfony_db_driver: pgsql
cops_symfony_db_uri: "{{cops_symfony_db_driver}}://{{cops_symfony_db_user}}{{cops_symfony_db_password and ':{0}'.format(cops_symfony_db_password) or ''}}@{{cops_symfony_db_host}}{{cops_symfony_db_port and ':{0}'.format(cops_symfony_db_port) or ''}}/{{cops_symfony_db_name}}"
cops_symfony_psql_uri: "postgres://{{cops_symfony_db_user}}{{cops_symfony_db_password and ':{0}'.format(cops_symfony_db_password) or ''}}@{{cops_symfony_db_host}}{{cops_symfony_db_port and ':{0}'.format(cops_symfony_db_port) or ''}}/{{cops_symfony_db_name}}"
cops_symfony_dotenv_defaults: |-
  SYMFONY_HTTP_LISTEN={{cops_symfony_http_listen}}
  SYMFONY_HTTP_PORT={{cops_symfony_http_port}}
  SYMFONY_HTTPS_PORT={{cops_symfony_https_port}}
  SYMFONY_API_LISTEN={{cops_symfony_api_listen}}
  SYMFONY_API_PORT={{cops_symfony_api_port}}
  PROJECT_PACKAGE={{ cops_symfony_name }}
  PROJECT_DIR=/code/app
  NO_MIGRATE={{not cops_symfony_migrate and '1' or '' }}
  COMPOSE_PROJECT_NAME={{cops_symfony_composename}}
  CONTROL_COMPOSE_FILES={{cops_symfony_compose_files|join(' ')}}
  COMPOSE_FILES={{cops_symfony_compose_files|join(':')}}
  CI_COMMIT_SHA={{cops_symfony_gitref}}
  SYMFONY_IMAGE={{ cops_symfony_docker_image }}
  SYMFONY_IMAGE_VERSION={{cops_symfony_docker_tag}}
  # This need to be changed in production
  SECRET_KEY={{ cops_symfony_secret_key }}
  # db
  POSTGRES_STARTUP_TIMEOUT=45s
  POSTGRES_USER={{ cops_symfony_db_user }}
  POSTGRES_PORT={{ cops_symfony_db_port }}
  POSTGRES_DB={{ cops_symfony_db_name }}
  POSTGRES_HOST={{ cops_symfony_db_host }}
  POSTGRES_PASSWORD={{cops_symfony_db_password }}
  PGPASSWD={{cops_symfony_db_password }}
  PGPASSWORD={{cops_symfony_db_password }}
  DATABASE_DRIVER={{cops_symfony_db_driver}}
  DATABASE_DB={{ cops_symfony_db_name }}
  DATABASE_USER={{ cops_symfony_db_user }}
  DATABASE_PASSWD={{cops_symfony_db_password }}
  DATABASE_HOST={{ cops_symfony_db_host }}
  DATABASE_PORT={{ cops_symfony_db_port }}
  DATABASE_URI={{cops_symfony_db_uri}}
  PSQL_URI={{cops_symfony_psql_uri}}
  DATABASE_URL={{cops_symfony_db_uri}}
  SYMFONY_NAME={{ cops_symfony_name }}
  COOKIE_DOMAIN={{ cops_symfony_hostname }}
  ABSOLUTE_URL_SCHEME=https
  ABSOLUTE_URL_DOMAIN={{ cops_symfony_hostname }}
  ABSOLUTE_URL_PORT=
  PHP_MEMORY_LIMIT={{ cops_symfony_php_memory_limit }}
  PHP_MAX_WORKERS={{ cops_symfony_php_max_workers }}
  PHP_MAX_SPARE_WORKERS={{ cops_symfony_php_max_spare_workers }}
  PHP_MIN_SPARE_WORKERS={{ cops_symfony_php_min_spare_workers }}
  PHP_APCU_ENABLED={{ cops_symfony_php_apcu_enabled }}
  PHP_XDEBUG_ENABLED={{ cops_symfony_php_xdebug_enabled }}
  PHP_OPCACHE_ENABLED={{ cops_symfony_php_opcache_enabled }}
  PROJECT_ENV={{ cops_symfony_project_env }}
  # cors
  SYMFONY__CORS_ORIGIN_WHITELIST={{cops_symfony_hosts_whitelist}}
  SYMFONY__ALLOWED_HOSTS={{cops_symfony_hosts_whitelist}}
  # env target
  SYMFONY__DEPLOY_ENV={{cops_symfony_deploy_env}}
  SYMFONY__PROJECT_ENV={{cops_symfony_project_env}}
  # HTTP protection
  SYMFONY__HTTP_PROTECT_USER={{cops_symfony_http_protect_user}}
  SYMFONY__HTTP_PROTECT_PASSWORD={{cops_symfony_http_protect_password}}
  {% if cops_symfony_sentry_dsn %}
  SYMFONY__SENTRY_DSN={{cops_symfony_sentry_dsn}}
  SYMFONY__SENTRY_RELEASE={{cops_symfony_docker_tag}}
  SYMFONY__SENTRY_TAGS={{cops_symfony_sentry_tags|join(',')}}
  {% endif %}
  MAILCATCHER_USER={{cops_symfony_mailcatcher_user}}
  MAILCATCHER_PASSWORD={{cops_symfony_mailcatcher_password}}
  DBS_DBNAMES={{cops_symfony_backuped_dbs}}
  DBS_KEEP_LASTS={{cops_symfony_backuped_dbs_keep_lasts}}
  NO_FORCE_SSL={{ cops_symfony_nginx_avoid_ssl_rewrite }}
  APP_TYPE=symfony
  SYMFONY_NAME={{ cops_symfony_name }}
  COMPOSE_PROJECT_NAME={{cops_symfony_composename}}
  CONTROL_COMPOSE_FILES={{cops_symfony_compose_files|join(' ')}}
  COMPOSE_FILES={{cops_symfony_compose_files|join(':')}}
  CI_COMMIT_SHA={{cops_symfony_gitref}}
  SYMFONY_IMAGE={{ cops_symfony_docker_image }}
  SYMFONY_IMAGE_VERSION={{cops_symfony_docker_tag}}
  APP_ENV={{ cops_symfony_deploy_env }}
  APP_SECRET={{ cops_symfony_secret_key }}
cops_symfony_dotenv: "{{cops_symfony_dotenv_defaults}}"
cops_symfony_dotenv_extra: ""
# free form for params inside dockerenv
cops_symfony_docker_env_extra: ""
# Normally playbook is in ./.ansible/playbooks
cops_symfony_code_dir: "{{playbook_dir}}/../.."
cops_symfony_code_rsync_path: "{%if cops_symfony_sync_ssh_user_internal and (cops_symfony_sync_ssh_user_internal != 'root')%}sudo {% endif%}rsync"
cops_symfony_code_rsync_excludes_default: [
    # include deploy projects base code
    "--include", "local/*-deploy",
    "--exclude", ".ansible",
    "--exclude", "local/*",
    "--exclude", ".tox",
    "--exclude", ".env",
    "--exclude", ".vscode",
    "--exclude", "docker.env"
]
cops_symfony_code_rsync_excludes: "{{cops_symfony_code_rsync_excludes_default}}"
cops_symfony_code_rsync_opts_custom: []
cops_symfony_code_rsync_opts_default: ["-azv"]
cops_symfony_code_rsync_opts: "{{cops_symfony_code_rsync_opts_default + cops_symfony_code_rsync_opts_custom + cops_symfony_code_rsync_excludes }}"
cops_symfony_backup_postgresql: "{{'5432' == '{0}'.format(cops_symfony_db_port)}}"
cops_symfony_backup_paths_to_backup:
- "{{cops_symfony_dir}}"
cops_symfony_backup_docker_volumes: [publiccontrib, private, webroot]
cops_symfony_backup_docker_volumes_: |-
  {% set res = [] %}
  {% for i in cops_symfony_backup_docker_volumes %}
  {% set  _ = res.append('_'.join([cops_symfony_composename, i])) %}
  {% endfor %}
  {{ res | to_json }}
cops_symfony_backup_pgdump_urls:
- name: "{{cops_symfony_db_name}}"
  url: "postgres://{{
      cops_symfony_db_user}}:{{cops_symfony_db_password}}@{{
        cops_symfony_db_host}}:{{cops_symfony_db_port}}/{{
          cops_symfony_db_name}}"
  docker_dir: "{{cops_symfony_dir}}"
  docker_service: backup
  docker_compose: "{{cops_symfony_dc}}"
cops_symfony_sync_theme_contents_front: |-
  {% set res = {} %}
  {% set _ = res.update({
    "{0}/{1}".format(cops_symfony_front_dir, '/static/dist/'): {},
    "{0}/{1}".format(cops_symfony_front_dir, '/static/js/'): {},
    "{0}/{1}".format(cops_symfony_front_dir, '/static/css/'): {},
    "{0}/{1}".format(cops_symfony_front_dir, '/static/styles/'): {},
    "{0}/{1}".format(cops_symfony_front_dir, '/static/scripts/'): {},
  }) %}
  {{ res | to_json }}
cops_symfony_sync_theme_contents_webpack: |-
  {% set res = {} %}
  {% set _ = res.update({
    "{0}/{1}".format(cops_symfony_front_dir, '/webpack-stats.json'): {},
    'webpack-stats.json': {},
  }) %}
  {% set _ = res.update(cops_symfony_sync_theme_contents_front) %}
  {{ res | to_json }}
cops_symfony_sync_theme_contents: {}
#
# teleport vars (duplicate environment to another)
#
teleport_sshcmd: ssh
teleport_rsynccmd: rsync
teleport_mode: default
# handle retrocompatibility within teleport modes
teleport_modes_mapper: {standard: default}
_teleport_mode: "{{teleport_modes_mapper.get(teleport_mode, teleport_mode)}}"
teleport_reset_perms: true
cops_symfony_generic_db_mode: postgres
teleport_db_mode: "{{cops_symfony_generic_db_mode}}"
teleport_ms_project: "{{cops_symfony_name}}"
teleport_services: [cron, "{{teleport_app_container}}", nginx]
teleport_stop_services: "{{teleport_services}}"
teleport_restart_services: "{{teleport_services}}"
# teleport_mode: default|makinastates
# teleport_origin: <origin from where we restore>
# teleport_destination: <destination to restore>
teleport_wd: "{{(
  cops_symfony_devmode and
  (playbook_dir|copsf_dirname|copsf_dirname) or
  cops_symfony_dir)}}"
teleport_orig_wd: "{{cops_symfony_dir}}"
teleport_orig_composename: "{{cops_symfony_name}}"
teleport_data_dir: "{{teleport_wd}}/local/nobackup/teleport"
teleport_orig_data_dir: "{{teleport_orig_wd}}/local/nobackup/teleport"
teleport_paths_dest_dump_mysql: "/var/lib/mysql/dbdumps"
teleport_paths_dest_dump_postgres: "/var/lib/postgresql/data/dbdumps"
teleport_paths_origin_dump: "{{teleport_orig_data_dir}}/dumps"
teleport_paths_dump: "{{teleport_wd}}/dumps"
teleport_paths_ms_origin_dump: "/srv/projects/{{teleport_ms_project}}/data/nobackup/teleport/dumps"
teleport_ms_publiccontrib_dir: "/srv/projects/{{teleport_ms_project}}/data/sites/default/files"
teleport_ms_private_dir: "/srv/projects/{{teleport_ms_project}}/data/private"
teleport_ms_privatedocs_dir: "/srv/projects/{{teleport_ms_project}}/data/private"
teleport_db_container: db
teleport_docker_publiccontrib_dir: "/var/lib/docker/volumes/{{teleport_orig_composename}}_publiccontrib/_data"
teleport_docker_private_dir: "/var/lib/docker/volumes/{{teleport_orig_composename}}_private/_data"
teleport_docker_privatedocs_dir: "{{teleport_orig_wd}}/app/var/private/docs"
teleport_container_publiccontrib_dir: /code/app/var/public
teleport_container_private_dir: /code/app/var/private
teleport_container_privatedocs_dir: /code/app/var/private/docs
teleport_app_container: symfony
teleport_paths_makinastates:
  origin_dump: "{{teleport_paths_ms_origin_dump}}"
  origin_publiccontrib: "{{teleport_ms_publiccontrib_dir}}"
  origin_private: "{{teleport_ms_private_dir}}"
  origin_privatedocs: "{{teleport_ms_privatedocs_dir}}"
teleport_paths_default:
  origin_dump: "{{teleport_paths_origin_dump}}"
  origin_publiccontrib: "{{teleport_docker_publiccontrib_dir}}"
  origin_private: "{{teleport_docker_private_dir}}"
  origin_privatedocs: "{{teleport_docker_privatedocs_dir}}"
teleport_paths_common:
  dest_dump: "{{lookup('vars', 'teleport_paths_dest_dump_'+teleport_db_mode)}}"
  dest_publiccontrib: "{{teleport_container_publiccontrib_dir}}"
  dest_private: "{{teleport_container_private_dir}}"
  dest_privatedocs: "{{teleport_container_privatedocs_dir}}"
  dump_file: dump.gz
teleport_paths: "{{teleport_paths_common|combine(lookup('vars', 'teleport_paths_'+_teleport_mode))}}"
teleport_paths_origin_dump_file: "{{teleport_paths.origin_dump}}/{{teleport_paths.dump_file}}"
teleport_paths_dest_dump_file: "{{teleport_paths.dest_dump}}/{{teleport_paths.dump_file}}"
teleport_rsync_args: "-azv --delete --delete-after"
teleport_rsync_extra_args: "{% if teleport_origin_vars.get('ansible_become', '') and ((become_user|default(ansible_user)) not in ['root'] )%}--rsync-path='sudo rsync'{%endif%}"
teleport_destination_ansible_host: "{{groups[teleport_destination][0]}}"
teleport_origin_ansible_host: "{{groups[teleport_origin][0]}}"
teleport_destination_host: "{{hostvars[teleport_destination_ansible_host]['ansible_host'] or teleport_destination_ansible_host}}"
teleport_origin_host: "{{hostvars[teleport_origin_ansible_host].get('ansible_host', teleport_origin_ansible_host)}}"
teleport_dc: "{{cops_symfony_dc}}"
teleport_owner: "{{cops_symfony_medias_owner}}"
teleport_group: "{{cops_symfony_medias_group}}"
teleport_use_host: "{{ansible_distribution != 'MacOSX'}}"
teleport_sync_db_files_default:
  dump:
    origin_path: "{{teleport_paths.origin_dump}}/"
    container: "{{teleport_db_container}}"
    container_path: "{{teleport_paths.dest_dump}}/"
    # only_if_exists: true
teleport_sync_files_default:
  privatedocs:
    origin_path: "{{teleport_paths.origin_privatedocs}}/"
    container: "{{teleport_app_container}}"
    container_path: "{{teleport_paths.dest_privatedocs}}/"
  private:
    origin_path: "{{teleport_paths.origin_private}}/"
    container: "{{teleport_app_container}}"
    container_path: "{{teleport_paths.dest_private}}/"
    rsync_extra_args: "--exclude docs"
  publiccontrib:
    origin_path: "{{teleport_paths.origin_publiccontrib}}/"
    container: "{{teleport_app_container}}"
    container_path: "{{teleport_paths.dest_publiccontrib}}/"
    # only_if_exists: true
teleport_sync_db_files: "{{teleport_sync_db_files_default}}"
teleport_sync_files: "{{teleport_sync_files_default}}"
teleport_ssh_key_path: "{{teleport_wd}}/local/.ssh/deploy"
teleport_ssh_origin_key_path: "{{(
  teleport_ssh_key_path or
    hostvars[groups[teleport_origin][0]].get('ansible_ssh_private_key_file', ''))}}"
teleport_ssh_destination_key_path: "{{(
  teleport_ssh_key_path or
    hostvars[groups[teleport_destination][0]].get(
      'ansible_ssh_private_key_file', ''))}}"
teleport_sshkey_stripper: "-i [^ ]+"
teleport_origin_sshargs_withoutkey: "{{teleport_origin_sshargs_default|regex_replace( teleport_sshkey_stripper, '')}}"
teleport_destination_sshargs_withoutkey: "{{teleport_destination_sshargs_default|regex_replace( teleport_sshkey_stripper, '')}}"
# as we connect not from bastion, dont use by default the key version one
ansible_ssh_bastion: ""
teleport_sshargs: "{{teleport_origin_sshargs}}"
teleport_origin_vars: "{{hostvars[groups[teleport_origin][0]]}}"
teleport_destination_vars: "{{hostvars[groups[teleport_destination][0]]}}"
teleport_origin_sshargs: "{% if teleport_origin_vars.get('ansible_user', '')%}-l {{teleport_origin_vars.ansible_user}}{%endif%}{{ ((teleport_origin_vars.get(
  'ansible_ssh_bastion', '') |copsf_asbool
) and teleport_origin_sshargs_default or teleport_origin_sshargs_withoutkey).replace('\"', \"'\")}}"
teleport_destination_sshargs: "{% if teleport_destination_vars.get('ansible_user', '')%}-l {{teleport_destination_vars.ansible_user}}{%endif%}{{ ((teleport_destination_vars.get(
  'ansible_ssh_bastion', '') |copsf_asbool
) and teleport_destination_sshargs_default or teleport_destination_sshargs_withoutkey).replace('\"', \"'\")}}"
teleport_origin_dump_scripts_postgres: |-
  {% if not teleport_origin_db_is_docker %}
  cd "{{teleport_paths.origin_dump}}"
  {% if teleport_origin_db_password %}PGPASSWORD="{{teleport_origin_db_password}}"{% endif %} \
  pg_dump \
    --host="{{teleport_origin_db_host}}" \
    --port="{{teleport_origin_db_port}}" \
    --username="{{teleport_origin_db_user}}" \
    --dbname="{{teleport_origin_db_name}}" \
    -Fc > {{teleport_paths.origin_dump}}/dump
  {% else %}
  cd "{{teleport_wd}}"
  {{teleport_dc}} exec -T {{teleport_db_container}} pg_dump \
    --username="{{teleport_origin_db_user}}" \
    --dbname="{{teleport_origin_db_name}}" \
    -Fc > {{teleport_paths.origin_dump}}/dump
  {% endif %}
teleport_origin_dump_script_compress: |-
  gzip -c {{teleport_paths.origin_dump}}/dump \
  > "{{teleport_paths_origin_dump_file}}"
  rm -fv {{teleport_paths.origin_dump}}/dump
teleport_origin_dump_script: |-
  set -ex
  {{lookup('vars', 'teleport_origin_dump_scripts_'+teleport_db_mode)}}
  {{teleport_origin_dump_script_compress}}
teleport_origin_db_host: "{{cops_symfony_db_host}}"
teleport_origin_db_port: "{{cops_symfony_db_password}}"
teleport_origin_db_user: "{{cops_symfony_db_user}}"
teleport_origin_db_password: "{{cops_symfony_db_password}}"
teleport_origin_db_name: "{{cops_symfony_db_name}}"
## standard is for retrocompat
teleport_origin_db_is_docker: "{{_teleport_mode in ['default', 'standard']}}"
teleport_origin_db_dockername: "{{cops_symfony_name}}_db_1"
teleport_db_encoding: 'UTF-8'
teleport_pg_restore_drop_db: true
cops_symfony_medias_owner: "1000"
cops_symfony_medias_group: "1000"
cops_symfony_force_sync_ssh_user: null
cops_symfony_sync_ssh_user: ""
ansible_bastion: ""
cops_symfony_sync_ssh_user_internal: "{% if((cops_symfony_force_sync_ssh_user) or
        (cops_symfony_sync_ssh_user and (cops_symfony_force_sync_ssh_user == True))
    )%}{{ cops_symfony_sync_ssh_user or ansible_user or '' }}{% endif %}"
teleport_env_ssh_deploy_key: "{{cops_symfony_dir_default}}/local/.ssh/deploy"
teleport_bastion_ssh_deploy_key: "{{teleport_env_ssh_deploy_key}}"
teleport_origin_viabastion_sshargs: "{% set d = hostvars[groups[teleport_origin][0]] %}{%if ansible_bastion%}-o ProxyCommand=\"ssh {% if teleport_bastion_ssh_deploy_key %}-i {{teleport_bastion_ssh_deploy_key}} {%endif%}-o IdentitiesOnly=yes -q -W {{d.ansible_host}}:{{d.ansible_port|default('22')}} {{ansible_bastion}} {%if ansible_bastion_user%}-l {{ansible_bastion_user}}{%endif%} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\" {%endif%}"
teleport_destination_viabastion_sshargs: "{% set d = hostvars[groups[teleport_destination][0]] %}{%if ansible_bastion%}-o ProxyCommand=\"ssh {% if teleport_bastion_ssh_deploy_key %}-i {{teleport_bastion_ssh_deploy_key}} {%endif%}-o IdentitiesOnly=yes -q -W {{d.ansible_host}}:{{d.ansible_port|default('22')}} {{ansible_bastion}} {%if ansible_bastion_user%}-l {{ansible_bastion_user}}{%endif%} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\" {%endif%}"
teleport_ssh_origin_args: "{{hostvars[groups[teleport_origin][0]].ansible_ssh_common_args | default('')}}"
teleport_ssh_destination_args: "{{hostvars[groups[teleport_destination][0]].ansible_ssh_common_args | default('')}}"
teleport_origin_sshargs_default: >-
  {% set h = groups[teleport_origin][0] %}
  {% set k = hostvars[h].get('ansible_bastion', '') != '' and teleport_env_ssh_deploy_key or teleport_ssh_origin_key_path %}
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  -o StrictHostKeyChecking=no
  {% if (
      hostvars[h].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[h].ssh_args | default('') }}
  {{ hostvars[h].ansible_ssh_args | default('') }}
  {{ ansible_bastion and teleport_origin_viabastion_sshargs or teleport_ssh_origin_args }}
  {{ hostvars[h].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% set user = cops_symfony_sync_origin_ssh_user|default(cops_symfony_sync_ssh_user) or ansible_user or '' %}
  {% if cops_symfony_sync_ssh_user_internal %}-l {{user}}{% endif %}
teleport_destination_sshargs_default: >-
  {% set h = groups[teleport_destination][0] %}
  {% set k = hostvars[h].get('ansible_bastion', '') != '' and teleport_env_ssh_deploy_key or teleport_ssh_origin_key_path %}
  -o StrictHostKeyChecking=no
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  {% if (
      hostvars[h].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[h].ssh_args | default('') }}
  {{ hostvars[h].ansible_ssh_args | default('') }}
  {{ ansible_bastion and teleport_destination_viabastion_sshargs or teleport_ssh_destination_args }}
  {{ hostvars[h].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% if((cops_symfony_force_sync_ssh_user) or
        (cops_symfony_sync_ssh_user and (cops_symfony_force_sync_ssh_user == True))
    )%}
  {% set user = cops_symfony_sync_dest_ssh_user|default(cops_symfony_sync_ssh_user) or ansible_user or '' %}
  {% if user %}-l {{user}}{% endif %}
  {% endif %}
teleport_post_reset_script_default: |-
  set -ex
  cd {{teleport_wd}};
  su="gosu symfony";
  cat|COMPOSE_INTERACTIVE_NO_CLI= {{teleport_dc}} \
  run -u root --no-deps --rm {{teleport_app_container}} \
  /code/init/init.sh bash -ex - <<EOF
  whoami >&2
  #
  if [ ! -e vendor/drush/drush/drush ];then bin/composerinstall;fi
  #
  bin/drush cr
  #
  EOF
  export COMPOSE_INTERACTIVE_NO_CLI=1
teleport_pg_restore_clean: true
teleport_pg_restore_flags: >-
  -U \$POSTGRES_USER -d \$POSTGRES_DB
  --no-owner --no-privileges --no-acl
  {% if teleport_pg_restore_clean%}--clean --if-exists{%endif%}
teleport_pg_restore: |-
  {% if teleport_pg_restore_drop_db%}
  ( LANG=C dropdb -U \$POSTGRES_USER \$POSTGRES_DB 2>&1 || /bin/true; ) \
  | ( egrep -v exist || /bin/true )
  createdb -U \$POSTGRES_USER -O \$POSTGRES_USER -E {{teleport_db_encoding}} \
    \$POSTGRES_DB
  {%endif%}
  zcat {{teleport_paths_dest_dump_file}}|pg_restore {{teleport_pg_restore_flags}}
teleport_reset_db_script_restore_postgres: |-
  set -ex
  cd "{{teleport_wd}}"
  cat|COMPOSE_INTERACTIVE_NO_CLI= {{teleport_dc}} \
  exec -T {{teleport_db_container}} sh -ex - <<EOF
  {{teleport_pg_restore}}
  EOF
teleport_clean_dump: false
teleport_reset_db_script_default: |-
  set -ex
  {{lookup('vars', 'teleport_reset_db_script_restore_'+teleport_db_mode)}}
  {% if teleport_clean_dump %}
  cd "{{teleport_wd}}"
  {{teleport_dc}} \
  exec -T {{teleport_db_container}} rm -f "{{teleport_paths_dest_dump_file}}"
  {% endif %}
teleport_restart_script_default: |-
  set -ex
  cd "{{teleport_wd}}"
  {% for i in teleport_restart_services %}
  {{teleport_dc}} stop {{i}}
  {{teleport_dc}} up -d --force-recreate --no-deps {{i}}
  {% endfor %}
teleport_restart_script: "{{teleport_restart_script_default}}"
teleport_stop_script_default: |-
  set -ex
  cd "{{teleport_wd}}"
  {% for i in teleport_stop_services %}
  {{teleport_dc}} stop {{i}}
  {% endfor %}
teleport_stop_script: "{{teleport_stop_script_default}}"
teleport_reset_db_script: "{{teleport_reset_db_script_default}}"
teleport_post_reset_script: "{{teleport_post_reset_script_default}}"
teleport_post_restart_services: "db"
teleport_post_force_restart_services: "setup-postgres setup-mysql redis memcached"
teleport_restart_dependant_services: |-
  set -e
  cd "{{teleport_wd}}"
  has_service() { {{teleport_dc}} config |grep -qE "^   +${1}:"; }
  log() { echo "$@" >&2; }
  restarted_services="{{teleport_post_restart_services}}"
  frestarted_services="{{teleport_post_force_restart_services}}"
  restart_service() {
    service="$1"
    shift
    log "restart service: $service"
    if ( has_service $service );then
      {{teleport_dc}} up -d --no-deps ${@} $service
    fi
  }
  for s in $restarted_services;do restart_service $s;done
  for s in $frestarted_services;do restart_service $s --force-recreate;done
teleport_db_restart_script: |-
  set -ex
  cd "{{teleport_wd}}"
  {{teleport_dc}} stop {{teleport_db_container}}
  {{teleport_dc}} up -d --force-recreate --no-deps {{teleport_db_container}}
teleport_deploy_ssh_key_paths: |-
  {%- set ret = cops_deploy_ssh_key_paths|copsf_deepcopy %}
  {%- for r, rdata in ret.items() %}
  {%- set _ = rdata.update(
    {'path': teleport_wd+'/local/.ssh/'+r}) %}
  {%- endfor %}
  {{- ret | to_json }}
teleport_dryrun: false
cops_symfony_haproxy_certbot: true
cops_symfony_haproxy_setup: "{{playbook_dir}}/roles/symfony/roles/haproxy/setup"
cops_symfony_haproxy_dir: "{{ (cops_symfony_dir + '/../haproxy') | copsf_abspath }}"
cops_symfony_haproxy_image: "haproxy:lts-buster"
cops_symfony_haproxy_listen_ip: "*"
cops_symfony_haproxy_listen_int_ip: "127.0.0.1"
cops_symfony_haproxy_listen_port: "80"
cops_symfony_haproxy_listen_sport: "443"
cops_symfony_haproxy_listen_cport: "9999"
cops_symfony_haproxy_redir_host: "127.0.0.1"
cops_symfony_certbot_address: "127.0.0.1"
cops_symfony_haproxy_redir_port: "8080"
cops_symfony_certbot_port: "380"
cops_symfony_haproxy_redir_sport: "8080"
cops_symfony_certbot_renewal: "30 days"
cops_symfony_certbot_staging: false
cops_symfony_haproxy_service: restarted
cops_symfony_haproxy_compose_files: "{% set c=['docker-compose.yml']%}{%if cops_symfony_haproxy_certbot%}{% set _=c.append('docker-compose-certbot.yml')%}{%endif%}{{c}}"
cops_symfony_haproxy_cname: "haproxy-{{cops_symfony_composename}}"
cops_symfony_haproxy_env: |-
  CERTBOT_RENEWAL={{cops_symfony_certbot_renewal}}
  COMPOSE_PROJECT_NAME={{cops_symfony_haproxy_cname}}
  COMPOSE_FILE={{':'.join(cops_symfony_haproxy_compose_files)}}
  HAPROXY_IP={{cops_symfony_haproxy_listen_ip}}
  HAPROXY_PORT={{cops_symfony_haproxy_listen_port}}
  HAPROXY_SPORT={{cops_symfony_haproxy_listen_sport}}
  HAPROXY_INT_IP={{cops_symfony_haproxy_listen_int_ip}}
  HAPROXY_CPORT={{cops_symfony_haproxy_listen_cport}}
  HAPROXY_REDIR_HOST={{cops_symfony_haproxy_redir_host}}
  HAPROXY_REDIR_PORT={{cops_symfony_haproxy_redir_port}}
  HAPROXY_REDIR_SPORT={{cops_symfony_haproxy_redir_sport}}
  CERTBOT_PORT={{cops_symfony_certbot_port}}
  CERTBOT_ADDRESS={{cops_symfony_certbot_address}}
  CERTBOT_DRYRUN="{{cops_symfony_certbot_dryrun}}"
  CERTBOT_STAGING="{{cops_symfony_certbot_staging}}"
  CERTBOT_HTTP01_CNS_1={{','.join(cops_symfony_hostnames)}}
cops_symfony_certbot_dryrun: "1"
cops_symfony_hostnames: "{{([cops_symfony_hostname]+cops_symfony_alternate_hostnames)|copsf_uniquify}}"
teleport_debug: false
teleport_is_verbose: "{{teleport_debug}}"
teleport_verbose: "{{teleport_is_verbose and 'v' or ''}}"
teleport_vverbose: "{{teleport_is_verbose  and '-v' or ''}}"
teleport_xverbose: "{{teleport_is_verbose and 'x' or ''}}"
teleport_vxverbose: "{{teleport_is_verbose  and '-x' or ''}}"
